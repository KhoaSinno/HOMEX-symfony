{% extends 'baseCustomer.html.twig' %}

{% block title %}Trang ch·ªß{% endblock %}

{% block styles %}
	<style>
		.chatbot-container {
			position: fixed;
			bottom: 20px;
			right: 20px;
			width: 350px;
			background: #fff;
			border: 1px solid #ddd;
			border-radius: 8px;
			box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
			overflow: hidden;
			z-index: 1000;
			display: flex;
			flex-direction: column;
			transition: all 0.3s ease;
		}

		.chatbot-container.hidden {
			display: none;
		}

		.chatbot-toggle-external {
			position: fixed;
			bottom: 20px;
			right: 20px;
			background: #007bff;
			color: #fff;
			border: none;
			border-radius: 50%;
			width: 50px;
			height: 50px;
			font-size: 24px;
			cursor: pointer;
			display: flex;
			justify-content: center;
			align-items: center;
			z-index: 999;
		}

		.chatbot-header {
			background: linear-gradient(90deg, #007bff, #00c4ff);
			color: #fff;
			padding: 12px;
			display: flex;
			justify-content: space-between;
			align-items: center;
			border-top-left-radius: 8px;
			border-top-right-radius: 8px;
			box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
		}

		.chatbot-header h4 {
			margin: 0;
			font-size: 18px;
			display: flex;
			align-items: center;
			color: #fff;
		}

		.chatbot-header h4::before {
			content: 'ü§ñ';
			margin-right: 8px;
		}

		.chatbot-toggle {
			background: none;
			border: none;
			color: #fff;
			font-size: 16px;
			cursor: pointer;
			transition: transform 0.2s;
		}

		.chatbot-toggle:hover {
			transform: scale(1.2);
		}

		.chatbot-body {
			display: flex;
			flex-direction: column;
			height: 400px;
		}

		.chatbot-messages {
			flex: 1;
			overflow-y: auto;
			padding: 10px;
			display: flex;
			flex-direction: column;
		}

		.chatbot-input {
			display: flex;
			padding: 10px;
		}

		.chatbot-input input {
			flex: 1;
			padding: 8px;
			border: 1px solid #ddd;
			border-radius: 4px;
		}

		.chatbot-input button {
			margin-left: 10px;
			padding: 8px 12px;
			background: #007bff;
			color: #fff;
			border: none;
			border-radius: 4px;
			cursor: pointer;
		}

		.user-message,
		.bot-message {
			display: flex;
			align-items: flex-start;
			margin: 10px 0;
		}

		.user-message {
			justify-content: flex-end;
		}

		.bot-message {
			justify-content: flex-start;
		}

		.user-message .avatar,
		.bot-message .avatar {
			width: 40px;
			height: 40px;
			border-radius: 50%;
			margin: 0 10px;
			display: flex;
			justify-content: center;
			align-items: center;
			font-weight: bold;
		}

		.user-message .avatar {
			background: #007bff;
			color: #fff;
			order: 1;
		}

		.bot-message .avatar {
			background: #f1f8e9;
			color: #555;
		}

		.bot-message .avatar::before {
			content: 'ü§ñ';
		}

		.user-message .message,
		.bot-message .message {
			padding: 10px;
			border-radius: 10px;
			max-width: 70%;
		}

		.user-message .message {
			background: #e0f7fa;
			order: 0;
		}

		.bot-message .message {
			background: #f1f8e9;
		}

		.message {
			max-width: 80%;
			padding: 10px 15px;
			border-radius: 15px;
			margin: 5px 0;
			word-wrap: break-word;
		}

		.user-message .message {
			background-color: #0084ff;
			color: white;
			margin-left: auto;
			border-radius: 18px 18px 0 18px;
		}

		.bot-message .message {
			background-color: #f0f0f0;
			color: #333;
			margin-right: auto;
			border-radius: 18px 18px 18px 0;
		}

		.bot-message .message ul {
			margin: 5px 0;
			padding-left: 20px;
		}

		.bot-message .message li {
			margin-bottom: 8px;
		}

		.bot-message .message p {
			margin: 8px 0;
		}

		.bot-message .message strong {
			font-weight: bold;
		}

		@keyframes typing {
			0% { content: '.'; }
			33% { content: '..'; }
			66% { content: '...'; }
			100% { content: '.'; }
		}

		.typing::after {
			content: '.';
			animation: typing 1.5s infinite;
		}
	</style>
{% endblock %}

{% block body %}
	<!-- Home Banner -->
	<section class="section section-search">
		<div class="container-fluid">
			<div class="banner-wrapper">
				<div class="banner-header text-center">
					<h1>T√¨m ki·∫øm b√°c sƒ©, ƒê·∫∑t l·ªãch h·∫πn</h1>
					<p>Kh√°m ph√° c√°c b√°c sƒ©, b·ªánh vi·ªán t·ªët nh·∫•t g·∫ßn b·∫°n trong th√†nh ph·ªë.</p>
				</div>
				<div class="search-box">
					<form action="{{ path('app_search_doctor') }}" method="get" class="d-flex justify-content-center">
						<div class="form-group search-info">
							<input type="text" name="fullname" class="form-control" placeholder="T√™n b√°c sƒ©">
							<span class="form-text">Vd: Dr. Joh</span>
						</div>
						<div class="form-group search-info">
							<input type="text" name="specialty" class="form-control" placeholder="Ch·ªçn khoa mu·ªën t√¨m">
							<span class="form-text">Vd: Tim m·∫°ch</span>
						</div>
						<button type="submit" class="btn btn-primary search-btn">
							<i class="fas fa-search"></i>
							<span>Search</span>
						</button>
					</form>
				</div>
			</div>
		</div>
	</section>
	<!-- /Home Banner -->

	<!-- Clinic and Specialities -->
	<section class="section section-specialities">
		<div class="container-fluid">
			<div class="section-header text-center">
				<h2>Ph√≤ng kh√°m v√† Chuy√™n khoa</h2>
				<p class="sub-title">Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi h·ªá th·ªëng ƒë·∫∑t l·ªãch kh√°m b·ªánh, n∆°i cung c·∫•p c√°c d·ªãch v·ª• y t·∫ø ƒëa d·∫°ng v·ªõi c√°c chuy√™n khoa h√†ng ƒë·∫ßu.</p>
			</div>
			<div class="row justify-content-center">
				<div class="col-md-9">
					<div class="specialities-slider slider">
						{% for specialty in specialties %}
							<div class="speicality-item text-center">
								<div class="speicality-img">
									<a href="{{ path('app_search_doctor', {'specialty': specialty.name}) }}">
										<img src="{{ asset('uploads/specialty/' ~ specialty.image) }}" class="img-fluid" alt="{{ specialty.name | specialty_label }}">
									</a>
									<span><i class="fa fa-circle" aria-hidden="true"></i></span>
								</div>
								<p><a href="{{ path('app_search_doctor', {'specialty': specialty.name}) }}">{{ specialty.name | specialty_label }}</a></p>
							</div>
						{% endfor %}
					</div>
				</div>
			</div>
		</div>
	</section>
	<!-- /Clinic and Specialities -->

	<!-- Popular Section -->
	<section class="section section-doctor">
		<div class="container-fluid">
			<div class="row">
				<div class="col-lg-4">
					<div class="section-header">
						<h2>B√°c Sƒ© C·ªßa Ch√∫ng T√¥i</h2>
						<p>Ch√∫ng t√¥i mang ƒë·∫øn d·ªãch v·ª• t·ªët nh·∫•t cho s·ª©c kh·ªèe c·ªßa b·∫°n</p>
					</div>
					<div class="about-content">
						<p>Ch√∫ng t√¥i cung c·∫•p d·ªãch v·ª• ƒë·∫∑t l·ªãch kh√°m b·ªánh tr·ª±c tuy·∫øn, gi√∫p b·∫°n d·ªÖ d√†ng k·∫øt n·ªëi v·ªõi c√°c b√°c sƒ© chuy√™n khoa h√†ng ƒë·∫ßu. V·ªõi h·ªá th·ªëng ƒë·∫∑t l·ªãch ƒë∆°n gi·∫£n, b·∫°n c√≥ th·ªÉ ch·ªçn th·ªùi gian v√† b√°c sƒ© ph√π h·ª£p v·ªõi nhu c·∫ßu c·ªßa m√¨nh m·ªôt c√°ch nhanh ch√≥ng v√† thu·∫≠n ti·ªán.</p>
						<p>ƒê·ªôi ng≈© b√°c sƒ© c·ªßa ch√∫ng t√¥i l√† nh·ªØng chuy√™n gia gi√†u kinh nghi·ªám trong c√°c lƒ©nh v·ª±c y t·∫ø kh√°c nhau. H·ªç lu√¥n s·∫µn s√†ng h·ªó tr·ª£ v√† t∆∞ v·∫•n cho b·∫°n, gi√∫p b·∫°n c√≥ ƒë∆∞·ª£c s·ª± chƒÉm s√≥c s·ª©c kh·ªèe t·ªët nh·∫•t.</p>
						<a href="{{ path('app_search_doctor') }}">Xem Th√™m</a>
					</div>
				</div>
				<div class="col-lg-8">
					<div class="doctor-slider slider">
						{% for doctor in doctors %}
							<div class="profile-widget">
								<div class="doc-img">
									<a href="doctor-profile.html">
										<img class="img-fluid" alt="User Image" src="{{ doctor.image ? asset('uploads/users/' ~ doctor.image) : asset('customer/assets/img/doctors/doctor-01.jpg') }}">
									</a>
								</div>
								<div class="pro-content">
									<h3 class="title">
										<a href="{{ path('app_doctor_profile', {'id': doctor.id}) }}">{{ doctor.fullname }}</a>
										<i class="fas fa-check-circle verified"></i>
									</h3>
									<p class="speciality">
										<a href="{{ path('app_search_doctor', {'specialty': doctor.specialty.name}) }}">{{ doctor.specialty.name | specialty_label }}</a>
									</p>
									<p class="doc-avg_star">
										<span class="text-warning">
											{% for i in 1..5 %}
												<i class="fas fa-star{% if i > doctor.getAverageRating|round(0, 'floor') %}-o{% endif %}"></i>
											{% endfor %}
										</span>
										<span>({{ doctor.getAverageRating|number_format(1) }} / 5)</span>
									</p>
									<ul class="available-info">
										<li><i class="fas fa-map-marker-alt"></i> {{ doctor.address ?? 'Newyork, USA' }}</li>
										<li><i class="far fa-money-bill-alt"></i> {{ doctor.consultationFee | currency_vnd }} VNƒê <i class="fas fa-info-circle" data-toggle="tooltip" title="Ph√≠ kh√°m ƒë√£ bao g·ªìm VAT"></i></li>
									</ul>
									<div class="row row-sm">
										<div class="col-12">
											<a href="{{ path('app_doctor_profile', {'id': doctor.id}) }}" class="btn book-btn">ƒê·∫∑t ngay</a>
										</div>
									</div>
								</div>
							</div>
						{% endfor %}
					</div>
				</div>
			</div>
		</div>
	</section>
	<!-- /Popular Section -->

	<!-- Chatbot Container -->
	<div id="chatbot" class="chatbot-container hidden">
		<div class="chatbot-header">
			<h4>HOMEX assistant</h4>
			<button id="chatbot-toggle" class="chatbot-toggle">‚úñ</button>
		</div>
		<div class="chatbot-body">
			<div class="chatbot-messages" id="chatbot-messages"></div>
			<div class="chatbot-input">
				<input type="text" id="chatbot-input" placeholder="Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n...">
				<button id="chatbot-send">G·ª≠i</button>
			</div>
		</div>
	</div>

	<!-- N√∫t toggle b√™n ngo√†i -->
	<button id="chatbot-toggle-external" class="chatbot-toggle-external">üí¨</button>

	<script>
		// ƒê·ªãnh nghƒ©a filter specialty_label trong JavaScript ƒë·ªÉ d·ªãch t√™n khoa
		const specialtyTranslations = {
			'Urology': 'Ti·∫øt ni·ªáu',
			'Neurology': 'Th·∫ßn kinh',
			'Orthopedic': 'Ch·ªânh h√¨nh',
			'Cardiologist': 'Tim m·∫°ch',
			'Dentist': 'Nha khoa'
		};

		// H√†m ƒë·ªÉ tho√°t c√°c k√Ω t·ª± HTML
		function escapeHtml(unsafe) {
			return unsafe
				.replace(/&/g, "&amp;")
				.replace(/</g, "&lt;")
				.replace(/>/g, "&gt;")
				.replace(/"/g, "&quot;")
				.replace(/'/g, "&#039;");
		}

		document.addEventListener('DOMContentLoaded', function () {
			const chatbotContainer = document.getElementById('chatbot');
			const chatbotToggle = document.getElementById('chatbot-toggle');
			const chatbotToggleExternal = document.getElementById('chatbot-toggle-external');
			const chatbotMessages = document.getElementById('chatbot-messages');
			const chatbotInput = document.getElementById('chatbot-input');
			const chatbotSend = document.getElementById('chatbot-send');

			// Hi·ªÉn th·ªã l·ªùi ch√†o khi m·ªü chatbot
			chatbotToggleExternal.addEventListener('click', function () {
				chatbotContainer.classList.remove('hidden');
				chatbotToggleExternal.style.display = 'none';
				if (!chatbotMessages.querySelector('.welcome-message')) {
					const welcomeMessage = document.createElement('div');
					welcomeMessage.className = 'bot-message welcome-message';
					const welcomeText = "Ch√†o b·∫°n! T√¥i l√† tr·ª£ l√Ω ·∫£o y t·∫ø c·ªßa h·ªá th·ªëng ƒë·∫∑t l·ªãch kh√°m b·ªánh HOMEX. R·∫•t vui ƒë∆∞·ª£c h·ªó tr·ª£ b·∫°n h√¥m nay!";
					welcomeMessage.innerHTML = `
						<div class="avatar"></div>
						<div class="message">${welcomeText}</div>
					`;
					chatbotMessages.appendChild(welcomeMessage);
					chatbotMessages.scrollTop = chatbotMessages.scrollHeight;
				}
			});

			// ƒê√≥ng chatbot
			chatbotToggle.addEventListener('click', function () {
				chatbotContainer.classList.add('hidden');
				chatbotToggleExternal.style.display = 'flex';
			});

			// G·ª≠i tin nh·∫Øn
			function sendMessage() {
				const question = chatbotInput.value.trim();
				if (!question) return;

				// Hi·ªÉn th·ªã tin nh·∫Øn ng∆∞·ªùi d√πng
				const userMessage = document.createElement('div');
				userMessage.className = 'user-message';
				userMessage.innerHTML = `
					<div class="message">${escapeHtml(question)}</div>
					<div class="avatar">U</div>
				`;
				chatbotMessages.appendChild(userMessage);
				chatbotMessages.scrollTop = chatbotMessages.scrollHeight;

				// Hi·ªÉn th·ªã d·∫•u ch·∫•m ch·∫°y
				const typingIndicator = document.createElement('div');
				typingIndicator.className = 'bot-message';
				typingIndicator.innerHTML = `
					<div class="avatar"></div>
					<div class="message typing"></div>
				`;
				chatbotMessages.appendChild(typingIndicator);
				chatbotMessages.scrollTop = chatbotMessages.scrollHeight;

				// X√≥a input
				chatbotInput.value = '';

				// G·ª≠i c√¢u h·ªèi ƒë·∫øn server
				fetch('/api/chatbot', {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json'
					},
					body: JSON.stringify({ question })
				})
					.then(response => response.json())
					.then(data => {
						console.log(data)
						// X√≥a d·∫•u ch·∫•m ch·∫°y
						chatbotMessages.removeChild(typingIndicator);

						// Hi·ªÉn th·ªã c√¢u tr·∫£ l·ªùi
						const botMessage = document.createElement('div');
						botMessage.className = 'bot-message d-flex';
						botMessage.innerHTML = `
							<div class="avatar"></div>
							<div class="message">${data.answer}</div>
						`;
						chatbotMessages.appendChild(botMessage);
						chatbotMessages.scrollTop = chatbotMessages.scrollHeight;

						// X·ª≠ l√Ω li√™n k·∫øt
						botMessage.querySelectorAll('a').forEach(link => {
							link.target = '_blank';
						});
					})
					.catch(error => {
						// X√≥a d·∫•u ch·∫•m ch·∫°y
						chatbotMessages.removeChild(typingIndicator);

						// Hi·ªÉn th·ªã th√¥ng b√°o l·ªói
						const errorMessage = document.createElement('div');
						errorMessage.className = 'bot-message d-flex flex-column';
						errorMessage.innerHTML = `
							<div class="avatar"></div>
							<div class="message">Xin l·ªói, t√¥i kh√¥ng th·ªÉ tr·∫£ l·ªùi ngay l√∫c n√†y. Vui l√≤ng th·ª≠ l·∫°i sau!</div>
						`;
						chatbotMessages.appendChild(errorMessage);
						chatbotMessages.scrollTop = chatbotMessages.scrollHeight;
					});
			}

			chatbotSend.addEventListener('click', sendMessage);
			chatbotInput.addEventListener('keypress', function (e) {
				if (e.key === 'Enter') sendMessage();
			});
		});
	</script>
{% endblock %}

{# Filter ƒë·ªÉ d·ªãch t√™n khoa #}
{% block twig_filters %}
	{% verbatim %}
		{% filter specialty_label %}
			{{ specialtyTranslations[value] ?? value }}
		{% endfilter %}
	{% endverbatim %}
{% endblock %}